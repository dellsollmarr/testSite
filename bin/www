#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('forum:server');
var http = require('http');
var mongoose = require('mongoose');
var passport = require('passport');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
// mongoose.connect('mongodb://localhost:27017/forumDB'); // Головна база данных
mongoose.connect('mongodb+srv://admin:admin@cluster0.x3lq4.mongodb.net/forumDb?retryWrites=true&w=majority');
//mongoose.connect('mongodb://localhost:27017/testdb');
//mongoose.connect('mongodb+srv://admin:admin@cluster0.m2gcy.mongodb.net/sample_restaurants?retryWrites=true&w=majority')
app.use(passport.initialize());
require('../middleware/passport')(passport);

/**
 * Create HTTP server.
 */
var socket = require("socket.io");
var server = http.createServer(app);
var chatware = require('../middleware/chatware');


var io = socket.listen(server);
io.on("connection", chatware);

var socketPrivateMsg = require("socket.io");
var ioPrivateMsg = socketPrivateMsg.listen(server, { path: "/privateMsg", serveClient: false });
ioPrivateMsg.path('/privateMsg');
ioPrivateMsg.on("connection", require("../middleware/privateMsg"));
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}